swagger: '2.0'
info:
  description: >
    # Introduction

    The dev-test-api is built on HTTP and is a RESTful API.  You are able to
    pull SDKs

    from API Gateway in order to untilize in your favorite front end framework.


    # Authentication

    When you sign up for an account, you are given your first API key.

    You can generate additional API keys, and delete API keys (as you may

    need to rotate your keys in the future). You authenticate to the

    dev-test-api by providing your secret key in the request header (x-api-key).


    dev-test-api offers three forms of authentication:  secret api key, public
    api key, and JSON Web Tokens

    - [PrivateApiKey](#section/Authentication/PrivateApiKey): used for requests
    made from the server side. Never share these keys. Keep them guarded and
    secure

    - [PublicApiKey](#section/Authentication/PublicApiKey): used for requests
    from the client side. These will be keys for customers.

    - [JWT](#section/Authentication/JWT): short lifetime tokens that can be
    assigned a specific expiration time


    Never share your secret keys. Keep them guarded and secure.


    <!-- ReDoc-Inject: <security-definitions> -->
  title: dev-test-api
  version: 0.0.1
  x-logo:
    backgroundColor: '#324052'
    url: 'https://s3.amazonaws.com/scw-images/scwlogo_w.png'
host: dev-test-api.scw.video
basePath: /
schemes:
  - https
paths:
  /admins/auth:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: Object with Cognito Admin User Auth attributes
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CognitoUserAuthRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CognitoAuth'
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admin Auth
      description: >
        Pass old password and new password to change password or pass in
        Password

        and username to retreive mfa code to device.
      operationId: adminsAuthpost
      summary: Login a dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/confirm/{userName}':
    put:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      operationId: adminsConfirmput
      summary: Confirm a newly registered dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/disable/{userName}':
    put:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      operationId: adminsDisableput
      summary: Disable a dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/enable/{userName}':
    put:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      operationId: adminsEnableput
      summary: Enable a dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/logout/{userName}':
    put:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      operationId: adminsLogoutput
      summary: Logout a logged in registered dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  /admins/mfa:
    post:
      consumes:
        - application/json
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: Object with Cognito Admin User Auth attributes
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CognitoUserMfaRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CognitoAuth'
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admin Auth
      operationId: adminsMfapost
      summary: Confirm MFA code for dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/mfa/disable/{userName}':
    put:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admin Auth
        - NYI (Not Yet Implemented)
      operationId: adminsDisableMfaput
      summary: Disable a dev-test-api admins user MFA
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/mfa/enable/{userName}':
    put:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admin Auth
        - NYI (Not Yet Implemented)
      operationId: adminsEnableMfaput
      summary: Enable a dev-test-api admins user MFA
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/mfa/{userName}':
    get:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CognitoAuth'
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admin Auth
        - NYI (Not Yet Implemented)
      operationId: adminsMfaget
      summary: Resend MFA code for dev-test-api admin user
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  /admins/signup:
    get:
      produces:
        - application/json
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
      responses:
        '200':
          description: Success
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - NYI (Not Yet Implemented)
        - Admins
      operationId: adminsSignupget
      summary: Retrieve registration page for admins
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: Object with Cognito Admin User attributes
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CognitoUserRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CognitoUser'
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      description: |
        This will be the method used for register new users for dev-test-api.
        To register a user you will need to pass signup, authorize to change
        the password, then pass an MFA token.
      operationId: adminsSignuppost
      summary: Register admin user with body
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
  '/admins/{userName}':
    delete:
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      description: |
        This will disable and delete the user if the user is currently enabled.
      operationId: adminsdelete
      summary: Delete a dev-test-api admin user.
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
    get:
      produces:
        - application/json
      parameters:
        - description: aws API Gateway key
          in: header
          name: x-api-key
          required: true
          type: string
        - description: The user name for Cloud user
          in: path
          name: userName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CognitoUser'
        '204':
          description: No Content Response
        '403':
          description: 'Access forbidden, invalid x-api-key was used'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Failure
      security:
        - PrivateApiKey: []
      tags:
        - Admins
      description: >
        This will pull user information including attributes for a Cognito
        UserPool User
      operationId: adminsget
      summary: Get a dev-test-api admin user.
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunctions.Arn}/invocations
definitions:
  AWSResponseMetadata:
    properties:
      HTTPHeaders:
        properties:
          connection:
            type: string
          content-length:
            type: string
          content-type:
            type: string
          date:
            type: string
          x-amzn-requestid:
            type: string
        type: object
      HTTPStatusCode:
        maximum: 600
        minimum: 100
        type: integer
      RequestId:
        type: string
      RetryAttempts:
        type: integer
    type: object
  CognitoAuth:
    properties:
      AuthenticationResult:
        $ref: '#/definitions/CognitoAuthenticationResult'
      ChallengeName:
        type: string
      ChallengeParameters:
        properties:
          CODE_DELIVERY_DELIVERY_MEDIUM:
            type: string
          CODE_DELIVERY_DESTINATION:
            type: string
          USER_ID_FOR_SRP:
            type: string
        type: object
      ResponseMetadata:
        $ref: '#/definitions/AWSResponseMetadata'
      Session:
        type: string
    type: object
  CognitoAuthenticationResult:
    properties:
      AccessToken:
        type: string
      ExpiresIn:
        maximum: 3600
        type: integer
      IdToken:
        type: string
      RefreshToken:
        type: string
      TokenType:
        type: string
    type: object
  CognitoUser:
    properties:
      ResponseMetadata:
        $ref: '#/definitions/AWSResponseMetadata'
      User:
        properties:
          Attributes:
            items:
              properties:
                Name:
                  type: string
                Value:
                  type: string
              type: object
            type: array
          Enabled:
            type: boolean
          PreferredMfaSetting:
            type: string
          UserAttributes:
            items:
              properties:
                Name:
                  type: string
                Value:
                  type: string
              type: object
            type: array
          UserCreatedDate:
            format: date-time
            type: string
          UserLastModifiedDate:
            format: date-time
            type: string
          UserMFASettingList:
            items:
              type: string
            type: array
          UserStatus:
            type: string
          Username:
            type: string
        type: object
    type: object
  CognitoUserAuthRequest:
    properties:
      newPassword:
        type: string
      password:
        type: string
      userName:
        type: string
    required:
      - userName
      - password
    type: object
  CognitoUserMfaRequest:
    properties:
      mfaCode:
        maximum: 999999
        minimum: 0
        type: integer
      session:
        type: string
      userName:
        type: string
    required:
      - userName
      - mfaCode
      - session
    type: object
  CognitoUserRequest:
    properties:
      email:
        format: email
        type: string
      familyName:
        type: string
      gender:
        type: string
      givenName:
        type: string
      password:
        type: string
      phoneNumber1:
        type: string
      userName:
        type: string
    required:
      - givenName
      - familyName
      - email
      - gender
      - phoneNumber1
      - userName
    type: object
  Empty:
    title: Empty Schema
    type: object
  Error:
    properties:
      error:
        type: string
      status:
        maximum: 600
        minimum: 100
        type: integer
    type: object
  InvalidError:
    allOf:
      - $ref: '#/definitions/Error'
      - properties:
          details:
            items:
              type: string
            type: array
        type: object
  User:
    properties:
      accountLevel:
        $ref: '#/definitions/accountLevel'
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      orgid:
        format: int64
        type: integer
      password:
        type: string
      phone:
        type: string
      siteid:
        format: int64
        type: integer
      uid:
        format: int64
        type: integer
      userStatus:
        $ref: '#/definitions/userStatus'
      username:
        type: string
    type: object
  accountLevel:
    enum:
      - lite
      - edge
      - one
      - many
    type: string
  userLevel:
    enum:
      - admin
      - user
    type: string
  userStatus:
    enum:
      - active
      - inactive
      - frozen
    type: string
securityDefinitions:
  JWT:
    description: |
      This will be a JWT token granted by Cognito IdP.
    in: header
    name: 'Authorization: Bearer jwt'
    type: apiKey
  PrivateApiKey:
    description: >
      This API key is created within the SAM template and is used to
      authenticated

      to endpoints within the API that require an API key.  This will be a key

      granted ideally by the /user/signup/admin page.
    in: header
    name: x-api-key
    type: apiKey
  PublicApiKey:
    description: >
      This API key is created within the SAM template and is used to
      authenticated

      to endpoints within the API that require an API key.  This will be a key

      granted ideally by the /user/signup page.
    in: header
    name: x-api-key
    type: apiKey
security:
  - PublicApiKey: []
  - PrivateApiKey: []
  - JWT: []
tags:
  - description: >
      Auth is a internal endpoint that facilitates authentication,
      authorization,

      and registration for the dev-test-api.  This provides an endpoint for
      internal s

      registrations.
    name: Admin Auth
  - description: >
      Admin is a internal endpoint that facilitates user information for SCW
      employees.

      It will be used to add, remove edit, and manage all aspects of users for
      the API.
    name: Admins
x-amazon-apigateway-api-key-source: HEADER
x-components:
  parameters:
    AccountLevel:
      description: new accountLevel parameter to be set for uid
      in: path
      name: accountLevel
      required: true
      schema:
        $ref: '#/definitions/accountLevel'
    Email:
      description: email of User object to return
      in: query
      name: email
      schema:
        format: email
        type: string
    FirstName:
      description: first name of User object to return
      in: query
      name: firstName
      schema:
        type: string
    LastName:
      description: last name of User object to return
      in: query
      name: lastName
      schema:
        type: string
    Password:
      description: The password for login in clear text for Cloud user
      in: query
      name: password
      required: true
      schema:
        type: string
    PhoneNumber1:
      description: phoneNumber1 of User object to return
      in: query
      name: phoneNumber1
      schema:
        type: string
    Uid:
      description: uid of User object to edit
      in: path
      name: uid
      required: true
      schema:
        format: int64
        type: integer
    User:
      description: User object
      in: path
      name: User
      required: true
      schema:
        $ref: '#/definitions/User'
    UserLevel:
      in: query
      name: userLevel
      required: true
      schema:
        $ref: '#/definitions/userLevel'
    UserName:
      description: The user name for Cloud user
      in: query
      name: userName
      required: true
      schema:
        type: string
    UserNamePath:
      description: The user name for Cloud user
      in: path
      name: userName
      required: true
      type: string
    UserStatus:
      description: Users current status
      in: path
      name: userStatus
      required: true
      schema:
        $ref: '#/definitions/userStatus'
    X-Api-Key:
      description: aws API Gateway key
      in: header
      name: x-api-key
      required: true
      type: string
  responses:
    AccessForbidden:
      description: 'Access forbidden, invalid x-api-key was used'
      schema:
        $ref: '#/definitions/Error'
    CognitoAuthChallenge:
      description: Success
      schema:
        $ref: '#/definitions/CognitoAuth'
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
      description: Conflict
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
      description: General error response
    InvalidDataError:
      content:
        application/json:
          schema:
            $ref: '#/definitions/InvalidError'
      description: Invalid data was sent
    NoContent:
      description: No Content Response
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
      description: Resource was not found
  headers:
    Access-Control-Allow-Headers:
      description: CORS allowed Headers
      schema:
        type: string
    Access-Control-Allow-Methods:
      description: CORS allowed Methods
      schema:
        type: string
    Access-Control-Allow-Origin:
      description: CORS allowed Origin
      schema:
        type: string
    Access-Control-Request-Method:
      description: CORS Request Method for Preflight
      schema:
        type: string
    X-Api-Key:
      description: AWS API Gateway X-Api-Key for dev-test-api
      schema:
        type: string
    X-Expires-After:
      description: date in UTC when token expires
      schema:
        format: date-time
        type: string
    X-Rate-Limit:
      description: calls per hour allowed by the user
      schema:
        format: int32
        type: integer
x-tagGroups:
  - tags:
      - Admin Auth
    name: Authorization
  - tags:
      - Admins
    name: Users

